// relative to project directory (where build.gradle lives)
ext.versionFile = file('version.properties')

// task load version is done first
// no need for ledt shift operator
// Task configuration blocks are always executed before task actions
task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream -> versionProps.load(stream) }

    // do not need `return`
    new ProjectVersion(
      versionProps.major.toInteger(),
      versionProps.minor.toInteger(),
      versionProps.release.toBoolean())
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

// execute closure immediately after the task graph has been populated
gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
  if(taskGraph.hasTask(release)) {
    if(!version.release) {
      version.release = true
      ant.propertyfile(file: versionFile) {
        entry(key: 'release', type: 'string', operation: '=', value: 'true')
      }
    }
  }
}

task release {
  println "go"
}
