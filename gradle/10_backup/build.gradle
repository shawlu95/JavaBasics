plugins {
    id 'java' // war extends java, no need to import twice
    id 'war'
    id 'org.gretty' version '2.1.0'
}

repositories {
    mavenCentral()
}

dependencies {
    // need to compile, but provided at runtime
    providedCompile 'javax.servlet:servlet-api:2.5',
            'javax.servlet.jsp:jsp-api:2.1'
    // no need to compile & provided at runtime
    runtime 'javax.servlet:jstl:1.1.2',
            'taglibs:standard:1.1.2'
}

// relative to project directory (where build.gradle lives)
ext.versionFile = file('version.properties')

// task load version is done first
// no need for ledt shift operator
// Task configuration blocks are always executed before task actions
task loadVersion {
    project.version = readVersion()
}

task printVersion {
    logger.quiet "Version: $version"
}

// run `gradle makeReleaseVersion` twice
// will show it's up-to-date
task makeReleaseVersion(group: 'versioning', description: 'Makes projecta release version.') {
  // configuration
  // make sure values are accessible in config time
  inputs.property('release', version.release)
  outputs.file versionFile

  // action
  doLast {
    version.release = true
    ant.propertyfile(file: versionFile) {
      entry(key: 'release', type: 'string', operation: '=', value: 'true')
    }
  }
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream -> versionProps.load(stream) }

    new ProjectVersion(
      versionProps.major.toInteger(),
      versionProps.minor.toInteger(),
      versionProps.release.toBoolean())
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

// make custom class
class ReleaseVersionTask extends DefaultTask {
  @Input Boolean release
  @OutputFile File destFile

  ReleaseVersionTask() {
    group = 'versioning'
    description = 'Makes project a release version.'
  }

  @TaskAction
  void start() {
    project.version.release = true
    ant.propertyfile(file: destFile) {
      entry(key: 'release', type: 'string', operation: '=', value: 'true')
    }
  }
}

// use the class
task makeReleaseVersionWithCustomClass(type: ReleaseVersionTask) {
  release = version.release
  destFile = versionFile
}

// ZIP task
task createDistribution(type: Zip, dependsOn: makeReleaseVersion) {
  from war.outputs.files
  from(sourceSets*.allSource) {
    into 'src'
  }

  from(rootDir) {
    include versionFile.name
  }
}

// copy task
task backupReleaseDistribution(type: Copy) {
  from createDistribution.outputs.files

  // backup folder is inside the build folder
  into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) {
  doLast {
    logger.quiet 'Releasing the project...'
  }
}
